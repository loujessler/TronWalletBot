import aiogram.utils.markdown as fmt

from data.currencies import currencies
from data.languages import languages


class ChecksMessages:
    def __init__(self, user):
        self.user = user

    def menu_msg(self):
        msg = {
            'ru': fmt.text(
                fmt.hbold('üßæÔ∏è –ß–µ–∫–∏\n\n'),
            ),
            'en': fmt.text(
                fmt.hbold('üßæ Checks\n\n'),
            )
        }
        return msg[self.user.language]

    def pre_draw_check_msg(self):
        msg = {
            'ru': fmt.text(
                fmt.hbold('üñã –í—ã–ø–∏—Å–∞—Ç—å —á–µ–∫\n\n'),
                fmt.hitalic('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n'),
                '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã'
            ),
            'en': fmt.text(
                fmt.hbold('üñã Draw a check\n\n'),
                fmt.hitalic('You can write a check to the user for payment\n\n'),
                'Enter the amount to pay'
            )
        }
        return msg[self.user.language]

    def draw_check_msg(self):
        msg = {
            'ru': fmt.text(
                fmt.hbold('ü™Ñ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã\n\n'),
                fmt.hitalic('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Å–∞—Ç—å —á–µ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n'),
                f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã'
            ),
            'en': fmt.text(
                fmt.hbold('ü™Ñ Draw a check\n\n'),
                fmt.hitalic('You can write a check to the user for payment\n\n'),
                'Enter the amount to pay'
            )
        }
        return msg[self.user.language]

    def check_msg(self, amount):
        msg = {
            'ru': (
                f'\n\nüí∏ **–ß–µ–∫ –æ–ø–ª–∞—Ç—ã**\n\n'
                f'–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {amount} TRX\n\n'
                f'–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n '
                f'`{self.user.wallet}` '
            ),
            'en': (
                f'\n\nüí∏ **Draw a check**\n\n'
                f'Payment for the amount {amount} TRX\n\n'
                f'Wallet for payment:\n '
                f'`{self.user.wallet}` '
            )
        }
        return msg[self.user.language]

    def check_msg_resend(self):
        msg = {
            'ru': f'\n\n__–ß—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π —á–µ–∫ –±–æ—Ç—É__ ',
            'en': f'\n\n__To make an automatic payment - send the current check to the bot__'
        }
        return msg[self.user.language]

    def ask_msg_for_send(self, data_msg):
        msg = {
            'ru': fmt.text(
                fmt.hbold('‚úÖ –ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n'),
                f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {data_msg[0]} TRX\n\n',
                f'–ù–∞ –∫–æ—à–µ–ª—ë–∫:\n',
                fmt.hcode(data_msg[1])
            ),
            'en': fmt.text(
                fmt.hbold('‚úÖ Send transaction\n\n'),
                f'Do you really want to send {data_msg[0]} TRX\n\n',
                f'To wallet:\n',
                fmt.hcode(data_msg[1])
            )
        }
        return msg[self.user.language]

    def address_not_found(self, wallet):
        msg = {
            'ru': fmt.text(
                fmt.hbold('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:  '),
                fmt.hcode(wallet),
                '\n –≤ —Å–µ—Ç–∏ TRON\n\n',
                '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é /menu'
            ),
            'en': fmt.text(
                fmt.hbold("We didn't find the current address:"),
                fmt.hcode(wallet),
                '\n in TRON network',
                'Return to menu /menu'
            ),
        }
        return msg[self.user.language]

    def cancel(self, cancel_msg='/cancel'):
        msg = {
            'ru': fmt.text(f"–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {cancel_msg} –¥–ª—è –æ—Ç–º–µ–Ω—ã"),
            'en': fmt.text(f"Write a number or tap on {cancel_msg} for cancel"),
        }
        return msg[self.user.language]
