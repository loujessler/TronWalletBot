import aiogram.utils.markdown as fmt

from utils.wallet_func.wallet_func import check_fee, resource_tron


class Withdraw:
    @staticmethod
    def withdraw(balance):
        message = {
            'ru': fmt.text(fmt.hbold(f'‚§¥Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n'), f'\n',
                           f'–í–∞—à –±–∞–ª–∞–Ω—Å ',
                           balance,
                           '  TRX', f'\n',
                           '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:'),
            'en': fmt.text(fmt.hbold(f'‚§¥Ô∏è Withdrawals\n'), f'\n',
                           f'Your balance ',
                           balance,
                           '  TRX', f'\n',
                           'Specify the amount to withdraw:'),
        }
        return message

    withdraw_zero_wallet = {
        'ru': fmt.text('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫'),
        'en': fmt.text('There are not enough funds on your balance. Please top up your wallet'),
    }

    cancel = {
        'ru': fmt.text("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /cancel_withdraw –¥–ª—è –æ—Ç–º–µ–Ω—ã"),
        'en': fmt.text("Write a number or tap on /cancel_withdraw for cancel"),
    }

    password = {
        'ru': fmt.text(
            fmt.hbold('üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')),
        'en': fmt.text(
            fmt.hbold('üîë Enter password:')),
    }

    @staticmethod
    def balance_invalid(balance):
        msg = {
            'ru': fmt.text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å ',
                           balance,
                           f'\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /cancel_withdraw'),
            'en': fmt.text('Insufficient funds. Your balance ',
                           balance,
                           f'\nFor cancel tap on /cancel_withdraw'),
        }
        return msg

    @staticmethod
    def state_amount(amount):
        msg = {
            'ru': fmt.text(
                '–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ',
                amount,
                f' TRX.\n\n–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ TRX: \n'
            ),
            'en': fmt.text(
                'You want to withdraw ',
                amount,
                f' TRX.\n\nEnter wallet address TRX: \n'
            ),
        }
        return msg

    @staticmethod
    def check_wallet_msg(wallet):
        msg = {
            'ru': fmt.text(
                fmt.hbold(f'–ù–µ –Ω–∞–π–¥–µ—Ç —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å—Å –≤ —Å–µ—Ç–∏ TRON: \n'),
                fmt.hcode(wallet),
                f'\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel_withdraw'
            ),
            'en': fmt.text(
                fmt.hbold(f"Can't find this address on the network TRON: \n"),
                fmt.hcode(wallet),
                f'\n\nFor cancel tap on /cancel_withdraw'
            ),
        }
        return msg

    @staticmethod
    def state_wallet(user, amount, wallet):
        def calculate_fee(user, wallet, amount):
            fee = check_fee(user, wallet, amount)
            resource = resource_tron(user.wallet)
            if 'freeNetUsed' in resource:
                net_left = resource['freeNetLimit'] - resource['freeNetUsed']
            else:
                net_left = 1500
            if fee > net_left:
                return fee/1000
            else:
                return 0
        msg = {
            'ru': fmt.text(
                fmt.hbold('–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ '),
                amount,
                fmt.hbold('  TRX'),
                f'\n\n–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç ‚âà ',

                calculate_fee(user, wallet, amount),

                fmt.hbold('  TRX'),
                f'\n\n–ù–∞ –∞–¥—Ä–µ—Å: \n\n',
                fmt.hcode(wallet),
                f'\n'
            ),
            'en': fmt.text(
                fmt.hbold('You want to withdraw '),
                amount,
                fmt.hbold('  TRX'),
                f'\nTo the address: \n\n',
                fmt.hcode(wallet),
                f'\n'
            ),
        }
        return msg

    password_invalid = {
        'ru': fmt.text(f"–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /cancel_withdraw –¥–ª—è –æ—Ç–º–µ–Ω—ã."),
        'en': fmt.text(f"Invalid password. \nRetype or tap on /cancel_withdraw for cancel"),
    }

    @staticmethod
    def withdraw_completed(amount, one_tron, wallet):
        msg = {
            'ru': fmt.text(
                fmt.hbold('–í—ã–≤–æ–¥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ\n\n'),
                '–°—É–º–º–∞ ',
                float(amount) / one_tron,
                '  TRX\n\n',
                '–ù–∞ –∞–¥—Ä–µ—Å: ',
                fmt.hcode(wallet), f'\n\n'),
            'en': fmt.text(
                fmt.hbold('Withdrawal was successful\n\n'),
                'Amount ',
                float(amount) / one_tron,
                '  TRX\n\n',
                'To the address: ',
                fmt.hcode(wallet), f'\n\n'),
        }
        return msg

    @staticmethod
    def withdraw_invalid(ex):
        msg = {
            'ru': fmt.text(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥\n\n'
                           '–û—à–∏–±–∫–∞: ',
                           ex),
            'en': fmt.text(f'Failed to complete the transaction\n\n'
                           'Error: ',
                           ex),
        }
        return msg

    withdraw_cancel = {
        'ru': fmt.text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'),
        'en': fmt.text('You canceled the transaction'),
    }

# resource menu

    @staticmethod
    def resource_msg(net_limit, net_left):
        msg = {
            'ru': fmt.text(
                'üöÄÔ∏è',
                fmt.hbold(' –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å'),
                f'\n\n–û—Å—Ç–∞–ª–æ—Å—å: ',
                fmt.hbold(net_left),
                fmt.hitalic('/'),
                fmt.hitalic(net_limit),
                ' üöÄ'
            ),
            'en': fmt.text(
                'üöÄÔ∏è',
                fmt.hbold(' Bandwidth'),
                f'\n\nLeft: ',
                fmt.hbold(net_left),
                fmt.hitalic('/'),
                fmt.hitalic(net_limit),
                ' üöÄ'
            ),
        }
        return msg
